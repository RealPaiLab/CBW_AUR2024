[["index.html", "Analysis Using R Canadian Bioinformatics Workshop Welcome Meet your Faculty Pre-workshop Materials and Laptop Setup Instructions", " Analysis Using R Canadian Bioinformatics Workshop Instructors: Shraddha Pai, Chaitra Sarathy last modified 2024-06-12 Welcome Welcome to Analysis Using R 2024. Meet your Faculty Shraddha Pai Investigator I, OICR Assistant Professor, University of Toronto Dr. Pai integrates genomics and computational methods to advance precision medicine. Her previous work involves DNA methylome-based biomarker discovery in psychosis, and building machine learning algorithms for patient classification from multi-modal data. The Pai Lab at the Ontario Institute for Cancer Research focuses on biomarker discovery for detection, diagnosis and prognosis in brain cancers and other brain-related disorders. Chaitra Sarathy Bioinformatics Specialist Krembil Research Institute Dr. Sarathy is a computational biologist with industry experience in software development. Her previous research centered around developing multi-scale mathematical models of human systems to characterise biochemical changes in obesity. In addition, she has developed methods based on machine learning and multi-omics integration to identify drug targets in cancer and stratify patients for clinical trials. She currently focusses on characterising genetic malfunctions in neurological diseases. Ian Cheong MSc. Candidate University of Toronto Ian is a Master’s level candidate in the Department of Medical Biophysics at the University of Toronto. His thesis work in the Pai lab involves analysis of single-cell transcriptomes to find the link between brain development and the development of childhood brain cancer.       Zoe Klein PhD. Candidate University of Toronto Zoe is a PhD level candidate in the Department of Molecular Genetics at the University of Toronto. Her thesis work in the Reimand lab involves using computational tools to investigate the role of non-coding RNA in cancer.       Amin Nooranikhojasteh Nia Hughes Program Manager Bioinformatics.ca nia.hughes@oicr.on.ca Nia is the Program Manager for Bioinformatics.ca, where she coordinates the Canadian Bioinformatics Workshop Series. Prior to starting at the OICR, she completed her M.Sc in Bioinformatics from the University of Guelph in 2020 before working there as a bioinformatician studying epigenetic and transcriptomic patterns across maize varieties. Pre-workshop Materials and Laptop Setup Instructions Laptop Setup Instructions A checklist to setup your laptop can be found here. Install these tools on your laptop before coming to the workshop: R (4.0+) Note: MacBook users with an Apple silicon chip (e.g., M1 or M2) should install the “arm64” version of R, while MacBook users with an Intel chip should install the regular (64-bit) version of R. You can check your laptop’s hardware specifications by clicking the Apple icon (top left corner) &gt; About This Mac and verifying whether the chip is Apple or Intel. Rstudio Make sure you have a robust internet browser such as Firefox, Safari or Chrome (not Internet Explorer). Make sure you have a PDF viewer (e.g. Adobe Acrobat, Preview or similar) or that you can read PDF files in your Web browser. R packages pkgList &lt;- c(&quot;tidyverse&quot;, &quot;clValid&quot;,&quot;rgl&quot;,&quot;RColorBrewer&quot;,&quot;corrplot&quot;,&quot;ClusterR&quot;, &quot;Rtsne&quot;,&quot;umap&quot;,&quot;BiocManager&quot;,&quot;mlbench&quot;,&quot;plotrix&quot;, &quot;factoextra&quot;) for (cur in pkgList){ message(sprintf(&quot;\\tChecking for %s ...&quot;, cur)) if (!requireNamespace(cur, quietly = TRUE)) install.packages(cur) } ## Checking for tidyverse ... ## Checking for clValid ... ## Checking for rgl ... ## Checking for RColorBrewer ... ## Checking for corrplot ... ## Checking for ClusterR ... ## Checking for Rtsne ... ## Checking for umap ... ## Checking for BiocManager ... ## Checking for mlbench ... ## Checking for plotrix ... ## Checking for factoextra ... biocPkg &lt;- c(&quot;edgeR&quot;,&quot;bladderbatch&quot;,&quot;airway&quot;) for (cur in biocPkg){ if (!requireNamespace(cur, quietly = TRUE)) BiocManager::install(cur) } Download example data Download data for the workshop: AUR2024_data.zip. Move the zip file to your working directory (usually under “/Users/yourname”). Unzip the file. You should see a folder with 4 files in it. "],["lecture-slides.html", "Lecture slides", " Lecture slides Module 1: Exploratory Data Analysis and Clustering Module 2: Dimensionality reduction for visualization and analysis Module 3: Generalized linear models Module 4: Multiple hypothesis testing with RNA-seq differential expression analysis "],["module-1-exploratory-data-analysis-and-clustering.html", "Module 1: Exploratory Data Analysis and Clustering Load mouse data Correlations, distances, and clustering Hierarchical clustering K-means clustering Using clValid to determine number of clusters Bonus Exercise", " Module 1: Exploratory Data Analysis and Clustering The goal of this lab is to examine correlation structure in a sample transcriptomic dataset using clustering. We will start using a small mouse expression dataset from two tissues: We will briefly explore the dataset using dim(), head(), and summary() We will visualize correlation using pairs() and corrplot() We will cluster samples using k-means and hierarchical clustering methods using dist() and hclust() We will assign samples to clusters using cutree() and visualize these using heatmap() We will use clValid to find out what cluster number best separates groups Finally we will explore clustering in a more complex bladder cancer dataset. Load mouse data For this exercise we are going to load a dataset built into the clValid package. This dataset measures 147 genes and expressed sequence tags in two developing mouse lineages: the neural crest cells and mesoderm-derived cells. There are three samples per group. Let’s load the data. suppressMessages(library(clValid)) data(mouse) Use str() to see what types of data the columns have: str(mouse) ## &#39;data.frame&#39;: 147 obs. of 8 variables: ## $ ID : Factor w/ 147 levels &quot;1415787_at&quot;,&quot;1415904_at&quot;,..: 111 88 93 74 138 103 46 114 112 24 ... ## $ M1 : num 4.71 3.87 2.88 5.33 5.37 ... ## $ M2 : num 4.53 4.05 3.38 5.5 4.55 ... ## $ M3 : num 4.33 3.47 3.24 5.63 5.7 ... ## $ NC1: num 5.57 5 3.88 6.8 6.41 ... ## $ NC2: num 6.92 5.06 4.46 6.54 6.31 ... ## $ NC3: num 7.35 5.18 4.85 6.62 6.2 ... ## $ FC : Factor w/ 9 levels &quot;ECM/Receptors&quot;,..: 3 8 6 6 1 3 1 6 5 6 ... Another command is head(): head(mouse) ## ID M1 M2 ## 1 1448995_at 4.706812 4.528291 ## 2 1436392_s_at 3.867962 4.052354 ## 3 1437434_a_at 2.875112 3.379619 ## 4 1428922_at 5.326943 5.498930 ## 5 1452671_s_at 5.370125 4.546810 ## 6 1448147_at 3.471347 4.129992 ## M3 NC1 NC2 NC3 ## 1 4.325836 5.568435 6.915079 7.353144 ## 2 3.474651 4.995836 5.056199 5.183585 ## 3 3.239800 3.877053 4.459629 4.850978 ## 4 5.629814 6.795194 6.535522 6.622577 ## 5 5.704810 6.407555 6.310487 6.195847 ## 6 3.964431 4.474737 5.185631 5.177967 ## FC ## 1 Growth/Differentiation ## 2 Transcription factor ## 3 Miscellaneous ## 4 Miscellaneous ## 5 ECM/Receptors ## 6 Growth/Differentiation Summary provides useful information about the distribution of variables. Note that FC has categorical variables: summary(mouse) ## ID M1 ## 1415787_at: 1 Min. :2.352 ## 1415904_at: 1 1st Qu.:4.188 ## 1415993_at: 1 Median :4.994 ## 1416164_at: 1 Mean :5.166 ## 1416181_at: 1 3rd Qu.:6.147 ## 1416221_at: 1 Max. :9.282 ## (Other) :141 ## M2 M3 ## Min. :2.139 Min. :2.500 ## 1st Qu.:4.151 1st Qu.:4.207 ## Median :5.043 Median :5.054 ## Mean :5.140 Mean :5.231 ## 3rd Qu.:6.015 3rd Qu.:6.129 ## Max. :9.273 Max. :9.228 ## ## NC1 NC2 ## Min. :2.100 Min. :1.996 ## 1st Qu.:4.174 1st Qu.:4.136 ## Median :4.996 Median :5.056 ## Mean :5.120 Mean :5.134 ## 3rd Qu.:5.860 3rd Qu.:5.920 ## Max. :8.905 Max. :8.954 ## ## NC3 ## Min. :2.125 ## 1st Qu.:4.293 ## Median :4.974 ## Mean :5.118 ## 3rd Qu.:5.826 ## Max. :9.251 ## ## FC ## EST :31 ## Transcription factor :28 ## Miscellaneous :25 ## ECM/Receptors :16 ## Growth/Differentiation:16 ## Unknown :10 ## (Other) :21 What are the values in FC? table(mouse$FC) ## ## ECM/Receptors ## 16 ## EST ## 31 ## Growth/Differentiation ## 16 ## Kinases/Phosphatases ## 7 ## Metabolism ## 8 ## Miscellaneous ## 25 ## Stress-induced ## 6 ## Transcription factor ## 28 ## Unknown ## 10 Usually the information about samples (“metadata”) is in a different table. Let’s load the sample information about the mouse dataset: pheno &lt;- read.delim(&quot;AUR2024_data/mouse_pheno.txt&quot;,sep=&quot;\\t&quot;,h=T,as.is=T) Let’s look at it: head(pheno) ## SampleID Type ## 1 M1 Mesenchymal ## 2 M2 Mesenchymal ## 3 M3 Mesenchymal ## 4 NC1 Neural-crest ## 5 NC2 Neural-crest ## 6 NC3 Neural-crest Let’s use pairs() to look at pairwise scatterplots of the expression data in a single plot. We need to subset the columns with the expression data first: mouse_exp = mouse[,c(&quot;M1&quot;,&quot;M2&quot;,&quot;M3&quot;,&quot;NC1&quot;,&quot;NC2&quot;,&quot;NC3&quot;)] pairs(mouse_exp) Correlations, distances, and clustering Let’s look at sample correlation matrix. This should be a square matrix, equal to the number of samples. We have six samples, so the correlation matrix should be 6x6. library(corrplot) mouse_cor &lt;- cor(mouse_exp) dim(mouse_cor) ## [1] 6 6 round(mouse_cor,2) ## M1 M2 M3 NC1 NC2 NC3 ## M1 1.00 0.98 0.98 0.84 0.81 0.78 ## M2 0.98 1.00 0.95 0.84 0.81 0.79 ## M3 0.98 0.95 1.00 0.82 0.78 0.75 ## NC1 0.84 0.84 0.82 1.00 0.97 0.95 ## NC2 0.81 0.81 0.78 0.97 1.00 0.99 ## NC3 0.78 0.79 0.75 0.95 0.99 1.00 corrplot(mouse_cor, method=&quot;color&quot;) Which samples appear to be best correlated with each other? Which samples don’t appear to be as well correlated with each other? Hierarchical clustering Hierarchical clustering requires distances between samples. Let’s use dist() to compute these distances, and hclust() to generate the hierarchical clustering object. d &lt;- dist(t(log(mouse_exp))) Using these distances, we cluster the samples using hierarchical clustering: h &lt;- hclust(d,method=&quot;ward.D2&quot;) The output of this can be plotted: plot(h) Can you guess how many clusters could best fit the data? Now let’s add a heatmap to this dendrogram, so we can see the values of genes in each cluster. For this we will use the heatmap() function. First let’s just try the heatmap function: mouse_exp &lt;- as.matrix(mouse_exp) heatmap(mouse_exp) We can clearly see the data separated into two. But now let’s colour-code samples based on cluster assignments. We get cluster assignments by “cutting” the dendrogram for two clusters (something we expect from our experimental design). We use cutree() for this. h2 &lt;- cutree(h, k = 2) Let’s look at our assigned labels: h2 ## M1 M2 M3 NC1 NC2 NC3 ## 1 1 1 2 2 2 Let’s assign colours to the clusters so that cluster 1 is in pink, and cluster 2 is in green: clust_colours &lt;- c(&quot;pink&quot;,&quot;green&quot;)[h2] Look at clust_colours: clust_colours ## [1] &quot;pink&quot; &quot;pink&quot; &quot;pink&quot; &quot;green&quot; ## [5] &quot;green&quot; &quot;green&quot; Now let’s plot the heatmap using these assigned cluster labels: heatmap(mouse_exp, ColSideColors=clust_colours) Note that the two colours are completely divided (i.e., there is no interspersed pink and green). However, not all datasets are this simple. Let’s cluster a bladder cancer gene expression dataset. This is in the R package, bladderbatch which we have already installed. library(bladderbatch) Load the dataset: data(bladderdata) We will use specialized functions to get the expression data and sample information. bexprs &lt;- exprs(bladderEset) bpheno &lt;- pData(bladderEset) How many genes and samples do we have in this dataset? Let us use the same code as above to cluster these samples: d &lt;- dist(t(bexprs)) h &lt;- hclust(d, method=&quot;ward.D2&quot;) plot(h) How many clusters do we see? Let’s assume three clusters, and assign colours to these. As before we use cutree(): h3 &lt;- cutree(h, k=3) clust_colours &lt;- c(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;)[h3] Look at the colour assignments? table(h3) ## h3 ## 1 2 3 ## 16 27 14 Let’s just plot the heatmap. heatmap(bexprs, ColSideColors=clust_colours) Why aren’t the samples clustering? Now try providing the hclustfun to heatmap() so it uses the same method to cluster as we did. For this we will create a custom function: myhclust &lt;- function(x) { hclust(x,method=&quot;ward.D2&quot;) } And now we run heatmap again, using our clustering function: heatmap(bexprs, ColSideColors=clust_colours, hclustfun=myhclust ) K-means clustering Let’s try using k-means clustering, asking for three clusters: kclust &lt;- kmeans( mouse_exp, centers = 3 ) kclust ## K-means clustering with 3 clusters of sizes 61, 64, 22 ## ## Cluster means: ## M1 M2 M3 NC1 ## 1 3.947440 3.946048 4.012209 3.922949 ## 2 5.553148 5.499583 5.642404 5.426931 ## 3 7.416536 7.406216 7.414799 7.548674 ## NC2 NC3 ## 1 3.950984 4.004362 ## 2 5.435363 5.353342 ## 3 7.534414 7.520608 ## ## Clustering vector: ## 1 2 3 4 5 6 7 8 9 ## 2 1 1 2 2 1 2 2 2 ## 10 11 12 13 14 15 16 17 18 ## 1 3 1 2 3 1 2 3 3 ## 19 20 21 22 23 24 25 26 27 ## 1 2 2 2 1 1 1 1 3 ## 28 29 30 31 32 33 34 35 36 ## 2 1 2 2 3 1 2 2 1 ## 37 38 39 40 41 42 43 44 45 ## 1 1 2 1 2 3 3 1 1 ## 46 47 48 49 50 51 52 53 54 ## 3 1 1 1 1 2 1 3 3 ## 55 56 57 58 59 60 61 62 63 ## 2 2 1 1 2 1 1 3 2 ## 64 65 66 67 68 69 70 71 72 ## 1 2 1 2 3 2 1 2 2 ## 73 74 75 76 77 78 79 80 81 ## 2 2 2 3 1 1 2 3 2 ## 82 83 84 85 86 87 88 89 90 ## 3 1 2 2 1 3 2 1 2 ## 91 92 93 94 95 96 97 98 99 ## 1 1 1 1 1 1 1 2 1 ## 100 101 102 103 104 105 106 107 108 ## 2 1 2 1 1 1 1 3 2 ## 109 110 111 112 113 114 115 116 117 ## 1 2 2 1 2 2 2 2 3 ## 118 119 120 121 122 123 124 125 126 ## 3 1 2 2 2 3 1 2 2 ## 127 128 129 130 131 132 133 134 135 ## 2 1 2 2 2 2 2 1 1 ## 136 137 138 139 140 141 142 143 144 ## 1 1 1 1 2 2 1 2 3 ## 145 146 147 ## 2 2 2 ## ## Within cluster sum of squares by cluster: ## [1] 193.59229 166.24343 81.44264 ## (between_SS / total_SS = 74.3 %) ## ## Available components: ## ## [1] &quot;cluster&quot; &quot;centers&quot; ## [3] &quot;totss&quot; &quot;withinss&quot; ## [5] &quot;tot.withinss&quot; &quot;betweenss&quot; ## [7] &quot;size&quot; &quot;iter&quot; ## [9] &quot;ifault&quot; Using clValid to determine number of clusters Use the clValid() function to validate clusters using the: Dunn index, silhouette scores, and connectivity validation_data &lt;- clValid( mouse_exp, 2:6, # num. clusters to evaluate clMethods = c(&quot;hier&quot;,&quot;kmeans&quot;), # methods to eval. validation = &quot;internal&quot; ) Let’s look at the results: summary(validation_data) ## ## Clustering Methods: ## hierarchical kmeans ## ## Cluster sizes: ## 2 3 4 5 6 ## ## Validation Measures: ## 2 3 4 5 6 ## ## hierarchical Connectivity 5.3270 14.2528 20.7520 27.0726 30.6194 ## Dunn 0.1291 0.0788 0.0857 0.0899 0.0899 ## Silhouette 0.5133 0.4195 0.3700 0.3343 0.3233 ## kmeans Connectivity 13.2548 17.6651 37.3980 43.2655 50.6095 ## Dunn 0.0464 0.0873 0.0777 0.0815 0.0703 ## Silhouette 0.4571 0.4182 0.3615 0.3367 0.3207 ## ## Optimal Scores: ## ## Score Method ## Connectivity 5.3270 hierarchical ## Dunn 0.1291 hierarchical ## Silhouette 0.5133 hierarchical ## Clusters ## Connectivity 2 ## Dunn 2 ## Silhouette 2 All measures of clustering consistently indicate that two clusters best fit the data. Now let’s cluster: d &lt;- dist(t(log(mouse_exp))) h &lt;- hclust(d,method=&quot;ward.D2&quot;) cluster_ids &lt;- cutree(h, k = 2) clust_colors &lt;- c(&quot;dodgerblue&quot;,&quot;orangered&quot;)[cluster_ids] heatmap( as.matrix(mouse_exp), hclustfun = myhclust, ColSideColors = clust_colors ) Bonus Exercise For your exercise, try the following: Load the MASS package using: library(MASS) Import crabs dataset using: data(crabs) Learn about this dataset using: ?crabs Extract the numeric columns describing the crab measurements (“FL”, “RW”, “CL”, “CW”, “BD”) Cluster the numeric columns using your method of choice Plot and color your data by clusters, by species (sp), and sex Do your clusters seem to separate these groups in the same way? "],["module-1-bonus-exercise-results.html", "Module 1: Bonus Exercise Results", " Module 1: Bonus Exercise Results Load packages and data, subset needed columns: library(MASS) data(crabs) Learn more about the data: ?crabs head(crabs) ## sp sex index FL RW CL CW BD ## 1 B M 1 8.1 6.7 16.1 19.0 7.0 ## 2 B M 2 8.8 7.7 18.1 20.8 7.4 ## 3 B M 3 9.2 7.8 19.0 22.4 7.7 ## 4 B M 4 9.6 7.9 20.1 23.1 8.2 ## 5 B M 5 9.8 8.0 20.3 23.0 8.2 ## 6 B M 6 10.8 9.0 23.0 26.5 9.8 Subset needed columns: crabs_meas &lt;- crabs[,c(&quot;FL&quot;,&quot;RW&quot;,&quot;CL&quot;,&quot;CW&quot;,&quot;BD&quot;)] Perform hierarchical clustering: c_dist &lt;- dist(crabs_meas) c_hclust &lt;- hclust(c_dist) plot(c_hclust) Colour-code samples based on cluster assignment. Assume there are two clusters. c_clusters = cutree(c_hclust,k = 2) Now create a pairs plot, but colour-code by: 1. by gene-expression based clusters 2. by species 3. by sex pairs( crabs_meas, col = c(&quot;orchid&quot;,&quot;forestgreen&quot;)[c_clusters] ) pairs( crabs_meas, col = c(&quot;orchid&quot;,&quot;forestgreen&quot;)[factor(crabs$sp)] ) pairs( crabs_meas, col = c(&quot;orchid&quot;,&quot;forestgreen&quot;)[factor(crabs$sex)] ) Hierarchical clustering: h &lt;- hclust(dist(crabs_meas),method=&quot;ward.D2&quot;) c2 &lt;- cutree(h,k=2) hclust_fun &lt;- function(x){ f &lt;- hclust(x, method = &quot;ward.D2&quot;); return(f) } library(RColorBrewer) heatmap( as.matrix(crabs_meas), hclustfun = hclust_fun, col = brewer.pal(&quot;Blues&quot;,n=8), RowSideColors = c(&quot;pink&quot;,&quot;brown&quot;)[c2], ColSideColors = rep(&quot;green&quot;,5) ) Plot by sex: heatmap( as.matrix(crabs_meas), hclustfun = hclust_fun, col = brewer.pal(&quot;Blues&quot;,n=8), RowSideColors = c(&quot;pink&quot;,&quot;brown&quot;)[factor(crabs$sex)], ColSideColors = rep(&quot;green&quot;,5) ) "],["module-2-dimensionality-reduction.html", "Module 2: Dimensionality reduction Principal Component Analysis t-Distributed Stochastic Neighbor Embedding (t-SNE) Uniform Manifold Approximation and Projection (UMAP) Bonus Exercise", " Module 2: Dimensionality reduction The goal of this lab is to learn how to reduce the dimension of your dataset. We will learn three different methods commonly used for dimension reduction: Principal Component Analysis t-stochastic Neighbour Embedding (tSNE) Uniform Manifold Approximation (UMAP) Principal Component Analysis Let’s start with PCA. PCA is commonly used as one step in a series of analyses. The goal of PCA is to explain most of the variability in the data with a smaller number of variables than the original data set. You can use PCA to explain the variability in your data using fewer variables. Typically, it is useful to identify outliers and determine if there’s batch effect in your data. Data: We will use the dataset that we used for exploratory analysis in Module 1. Load the mouse data. library(clValid) data(&quot;mouse&quot;) mouse_exp &lt;- mouse[,c(&quot;M1&quot;,&quot;M2&quot;,&quot;M3&quot;,&quot;NC1&quot;,&quot;NC2&quot;,&quot;NC3&quot;)] head(mouse_exp) ## M1 M2 M3 NC1 ## 1 4.706812 4.528291 4.325836 5.568435 ## 2 3.867962 4.052354 3.474651 4.995836 ## 3 2.875112 3.379619 3.239800 3.877053 ## 4 5.326943 5.498930 5.629814 6.795194 ## 5 5.370125 4.546810 5.704810 6.407555 ## 6 3.471347 4.129992 3.964431 4.474737 ## NC2 NC3 ## 1 6.915079 7.353144 ## 2 5.056199 5.183585 ## 3 4.459629 4.850978 ## 4 6.535522 6.622577 ## 5 6.310487 6.195847 ## 6 5.185631 5.177967 Step 1. Preparing Our Data It is important to make sure that all the variables in your dataset are on the same scale to ensure they are comparable. So, let us check if that is the case with our dataset. To do that, we will first compute the means and variances of each variable using apply(). apply(mouse_exp, 2, mean) ## M1 M2 M3 NC1 ## 5.165708 5.140265 5.231185 5.120369 ## NC2 NC3 ## 5.133540 5.117914 apply(mouse_exp, 2, var) ## M1 M2 M3 NC1 ## 1.858482 1.848090 1.869578 2.005517 ## NC2 NC3 ## 2.080473 2.083073 As you can see, the means and variances for all the six variables are almost the same and on the same scale, which is great! However, keep in mind that, the variables need not always be on the same scale in other non-omics datasets. PCA is influenced by the magnitude of each variable. So, it is important to include a scaling step during data preparation. Ideally, it is great to have variables centered at zero for PCA because it makes comparing each principal component to the mean straightforward. Scaling can be done either using scale(). Step 2. Apply PCA Since our variables are on the same scale, we can directly apply PCA using prcomp(). pc_out &lt;- prcomp(t(mouse_exp)) The output of prcomp() is a list. Examine the internal structure of pc_out. str(pc_out) ## List of 5 ## $ sdev : num [1:6] 5.577 1.764 1.583 0.758 0.667 ... ## $ rotation: num [1:147, 1:6] 0.218 0.128 0.127 0.111 0.101 ... ## ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. ..$ : chr [1:147] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## .. ..$ : chr [1:6] &quot;PC1&quot; &quot;PC2&quot; &quot;PC3&quot; &quot;PC4&quot; ... ## $ center : Named num [1:147] 5.57 4.44 3.78 6.07 5.76 ... ## ..- attr(*, &quot;names&quot;)= chr [1:147] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ scale : logi FALSE ## $ x : num [1:6, 1:6] -5.09 -4.46 -5.56 3.78 5.34 ... ## ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. ..$ : chr [1:6] &quot;M1&quot; &quot;M2&quot; &quot;M3&quot; &quot;NC1&quot; ... ## .. ..$ : chr [1:6] &quot;PC1&quot; &quot;PC2&quot; &quot;PC3&quot; &quot;PC4&quot; ... ## - attr(*, &quot;class&quot;)= chr &quot;prcomp&quot; The output of prcomp() contains five elements sdev, rotation, center, scale and x. Let us examine what each looks like. pc_out$sdev ## [1] 5.576793e+00 1.764207e+00 ## [3] 1.582710e+00 7.576131e-01 ## [5] 6.668424e-01 3.478211e-15 sddev gives standard deviation (used for computing variance explained). We will see how in sections below. head(pc_out$rotation) ## PC1 PC2 PC3 ## 1 0.2175336 -0.09843120 0.24646637 ## 2 0.1277130 -0.05971284 -0.05865888 ## 3 0.1274181 -0.06356995 0.12354321 ## 4 0.1113816 0.07285611 -0.05940135 ## 5 0.1010094 0.24317614 0.03484815 ## 6 0.1125121 -0.05572681 0.08624863 ## PC4 PC5 ## 1 -0.18360970 -0.004759212 ## 2 -0.04302434 0.069398716 ## 3 0.18188678 -0.083764114 ## 4 0.14861908 0.016695673 ## 5 -0.06467411 0.047649021 ## 6 0.17407046 -0.264955100 ## PC6 ## 1 0.10208473 ## 2 0.07599342 ## 3 0.04449747 ## 4 -0.09283980 ## 5 0.09397187 ## 6 0.09855772 After PCA, the observations are expressed in new axes and the loadings are provided in pc_out$rotation. Each column of pc_out$rotation contains the corresponding principal component loading vector. We see that there are six distinct principal components, as indicated by column names of pc_out$rotation. pc_out$center ## 1 2 3 4 ## 5.566266 4.438431 3.780365 6.068163 ## 5 6 7 8 ## 5.755939 4.400684 5.160500 5.683933 ## 9 10 11 12 ## 5.021818 3.586855 7.078354 4.669260 ## 13 14 15 16 ## 5.831477 8.181517 4.614014 5.382728 ## 17 18 19 20 ## 7.529027 7.313685 4.547702 5.290136 ## 21 22 23 24 ## 5.187301 6.013839 3.985299 3.642647 ## 25 26 27 28 ## 4.154045 4.674278 8.505242 4.899224 ## 29 30 31 32 ## 3.882938 4.964233 5.587100 8.420071 ## 33 34 35 36 ## 4.668532 5.571026 5.341486 4.246074 ## 37 38 39 40 ## 4.603076 3.906143 5.290324 3.205139 ## 41 42 43 44 ## 5.501723 6.599761 7.957662 4.147284 ## 45 46 47 48 ## 2.674647 7.029644 4.297315 3.550111 ## 49 50 51 52 ## 4.440525 4.440604 5.233737 4.589023 ## 53 54 55 56 ## 6.559673 7.563419 5.203153 5.563289 ## 57 58 59 60 ## 4.172330 4.363869 5.816609 4.678070 ## 61 62 63 64 ## 4.538479 8.210925 5.701295 4.330345 ## 65 66 67 68 ## 5.057213 3.462456 6.015641 7.096558 ## 69 70 71 72 ## 5.494757 2.779979 5.011158 6.460525 ## 73 74 75 76 ## 5.065625 6.057910 5.358162 7.126652 ## 77 78 79 80 ## 3.547180 3.157770 5.342622 7.277169 ## 81 82 83 84 ## 6.229511 8.134572 3.942388 5.476810 ## 85 86 87 88 ## 6.147777 2.856113 6.580211 5.616440 ## 89 90 91 92 ## 4.708294 5.244003 2.387781 3.769301 ## 93 94 95 96 ## 4.025543 3.968695 3.848995 4.564350 ## 97 98 99 100 ## 4.546153 4.840263 4.257429 6.249407 ## 101 102 103 104 ## 3.007570 5.067437 4.271637 4.436552 ## 105 106 107 108 ## 4.231309 3.973251 6.599789 4.837524 ## 109 110 111 112 ## 4.322573 4.867455 5.161541 3.307676 ## 113 114 115 116 ## 6.143019 5.071243 6.177220 4.827735 ## 117 118 119 120 ## 7.376264 7.533733 4.374265 5.183771 ## 121 122 123 124 ## 5.625725 5.976763 8.844863 4.056325 ## 125 126 127 128 ## 5.954586 4.811972 4.748867 4.025010 ## 129 130 131 132 ## 5.284776 5.388265 5.895763 6.181208 ## 133 134 135 136 ## 6.034146 3.303646 3.136626 3.336961 ## 137 138 139 140 ## 4.592918 3.190322 3.742253 5.845806 ## 141 142 143 144 ## 5.574498 3.444501 5.058708 6.899120 ## 145 146 147 ## 5.868390 5.154152 5.004526 pc_out$scale ## [1] FALSE The center and scale elements correspond to the means and standard deviations of the variables that were used for scaling prior to implementing PCA. # See the principal components dim(pc_out$x) ## [1] 6 6 head(pc_out$x) ## PC1 PC2 PC3 ## M1 -5.091712 0.07170858 0.1415984 ## M2 -4.463273 -2.78279960 -1.0114746 ## M3 -5.560192 2.16495377 1.2469598 ## NC1 3.781742 1.47081980 -2.5212675 ## NC2 5.338015 0.05493898 0.2748255 ## NC3 5.995420 -0.97962153 1.8693583 ## PC4 PC5 ## M1 -1.2149422 0.5781693 ## M2 0.5067161 -0.2847184 ## M3 0.6895931 -0.3109790 ## NC1 0.2858078 0.3841018 ## NC2 -0.6551843 -1.0483358 ## NC3 0.3880095 0.6817622 ## PC6 ## M1 3.011480e-15 ## M2 3.178013e-15 ## M3 3.053113e-15 ## NC1 3.090410e-15 ## NC2 2.886580e-15 ## NC3 3.247402e-15 Let’s now see the summary of the analysis using the summary() function! summary(pc_out) ## Importance of components: ## PC1 PC2 ## Standard deviation 5.5768 1.76421 ## Proportion of Variance 0.8242 0.08248 ## Cumulative Proportion 0.8242 0.90663 ## PC3 ## Standard deviation 1.58271 ## Proportion of Variance 0.06638 ## Cumulative Proportion 0.97301 ## PC4 ## Standard deviation 0.75761 ## Proportion of Variance 0.01521 ## Cumulative Proportion 0.98822 ## PC5 ## Standard deviation 0.66684 ## Proportion of Variance 0.01178 ## Cumulative Proportion 1.00000 ## PC6 ## Standard deviation 3.478e-15 ## Proportion of Variance 0.000e+00 ## Cumulative Proportion 1.000e+00 The first row gives the Standard deviation of each component, which is the same as the result of pc_out$sdev. The second row, Proportion of Variance, shows the percentage of explained variance, also obtained as variance/sum(variance) where variance is the square of sdev. Compute variance pc_out$sdev^2 / sum(pc_out$sdev^2) ## [1] 8.241484e-01 8.247748e-02 ## [3] 6.638030e-02 1.521008e-02 ## [5] 1.178373e-02 3.205888e-31 From the second row you can see that the first principal component explains over 82.4% of the total variance (Note: multiply each number by 100 to get the percentages). The second principal component explains 8.2% of the variance, and the amount of variance explained reduces further down with each component. Finally, the last row, Cumulative Proportion, calculates the cumulative sum of the second row. Now, let’s have some fun with visualising the results of PCA. Step 3. Visualisation of PCA results A. Scree plot We can visualize the percentage of explained variance per principal component by using what is called a scree plot. We will call the fviz_eig() function of the factoextra package for the application. You may need to install the package using install.packages(\"factoextra\"). library(factoextra) ## Loading required package: ggplot2 ## Need help getting started? Try ## the R Graphics Cookbook: ## https://r-graphics.org ## Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa fviz_eig(pc_out, addlabels = TRUE) The x-axis shows the PCs and the y-axis shows the percentage of variance explained that we saw above. Percentages are listed on top of the bars. It’s common to see that the first few principal components explain the major amount of variance. Scree plot can also be used to decide the number of components to keep for rest of your analysis. One of the ways is using the elbow rule. This method is about looking for the “elbow” shape on the curve and retaining all components before the point where the curve flattens out. Here, the elbow appears to occur at the second principal component. Note that we will NOT remove any components for the current analysis since our goal is to understand how PCA can be used to identify batch effect in the data. B. Scatter plot After a PCA, the observations are expressed in principal component scores (as we saw above in pc_out$rotation). So, it is important to visualize the observations along the new axes (principal components) how observations have been transformed and to understand the relations in the dataset. This can be achieved by drawing a scatterplot. To do so, first, we need to extract and the principal component scores in pc_out$rotation, and then we will store them in a data frame called PC. PC &lt;- as.data.frame(pc_out$x) Plot the first two principal components as follows: plot(x = PC$PC1, y = PC$PC2, pch = 19, xlab=&quot;PC1&quot;, ylab=&quot;PC2&quot;) We see six points in two different groups. The points correspond to six samples. But, we don’t know what group/condition they belong to. That can be done by adding sample-related information to the data.frame PC (such as cell type, treatment type, batch they were processed etc) as new variables. Here we will add the sample names and the cell types. PC$sample &lt;- factor(rownames(PC)) PC$cells &lt;- factor(c(rep(&quot;mesoderm&quot;, 3), rep(&quot;neural_crest&quot;, 3))) Plot the scatterplot again and now, colour the points by cell type. Then, add sample names and legend. plot(x = PC$PC1, y = PC$PC2, col = PC$cells, pch = 19, xlab=&quot;PC1&quot;, ylab=&quot;PC2&quot;) text(x= PC$PC1, y = PC$PC2-0.15, labels = PC$sample) legend(&quot;bottomright&quot;, legend = levels(PC$cells), col = seq_along(levels(PC$cells)), pch = 19) Samples from each cell type are closer together on the scatter plot. If the batch information is available, it can also be used to colour the scatterplot. Ideally, samples from different conditions should cluster together, irrespective of the batch they were processed in. You can also plot other PCs such as PC2 vs PC3 by changing the x and y variables above. Another way to plot all PCs is using pairs() pairs(PC[,1:6], col=c(&quot;black&quot;,&quot;red&quot;)[PC$cells], pch=16) C. Biplot Another useful plots to understand the results are biplots. We will use the fviz_pca_biplot() function of the factoextra package. We will set label=“var” argument to label the variables. fviz_pca_biplot(pc_out, label = &quot;var&quot;) The axes show the principal component scores, and the vectors are the loading vectors, whose components are in the magnitudes of the loadings. Vectors indicate that samples from each cell type are closer together. t-Distributed Stochastic Neighbor Embedding (t-SNE) t-SNE is a technique for dimensionality reduction that is particularly well suited for the visualization of high-dimensional datasets. There are several packages that have implemented t-SNE. Here we are going to use the package tsne and the function tsne. Let’s run the t-SNE algorithm on the iris dataset and generate a t-SNE plot. library(tsne) library(RColorBrewer) ### load the input data data(iris) iris_data &lt;- iris[,-5] # set colours of the plot my_cols_vec &lt;- brewer.pal(&quot;Set1&quot;,n = length(levels(iris$Species))) species_cols &lt;- my_cols_vec[factor(iris$Species)] # run t-SNE iris_tsne &lt;- tsne(iris_data) ## sigma summary: Min. : 0.486505661043274 |1st Qu. : 0.587913800179832 |Median : 0.614872437640536 |Mean : 0.623051089344394 |3rd Qu. : 0.654914112723525 |Max. : 0.796707932771489 | ## Epoch: Iteration #100 error is: 13.3041574467009 ## Epoch: Iteration #200 error is: 0.219406190715777 ## Epoch: Iteration #300 error is: 0.218665949401944 ## Epoch: Iteration #400 error is: 0.218623506988482 ## Epoch: Iteration #500 error is: 0.218622371948753 ## Epoch: Iteration #600 error is: 0.218622331780263 ## Epoch: Iteration #700 error is: 0.218622330100121 ## Epoch: Iteration #800 error is: 0.21862233002708 ## Epoch: Iteration #900 error is: 0.218622330023556 ## Epoch: Iteration #1000 error is: 0.218622330023421 plot(iris_tsne, pch=16, col=species_cols) legend(&quot;topright&quot;, legend = levels(iris$Species), col = my_cols_vec, pch = 19) The tsne function has a parameter called perplexity which determines how to balance attention to neighborhood vs global structure. Default value is 30 which was used above. Set perplexity to 10, 20, 50, 100 and rerun tsne. Then visualise each result. iris_tsne10 &lt;- tsne(iris_data,perplexity = 10) ## sigma summary: Min. : 0.310480302725598 |1st Qu. : 0.434991399098757 |Median : 0.46366395344447 |Mean : 0.475404572165371 |3rd Qu. : 0.508931723050902 |Max. : 0.694616846992079 | ## Epoch: Iteration #100 error is: 13.8199384799565 ## Epoch: Iteration #200 error is: 0.343425065230366 ## Epoch: Iteration #300 error is: 0.318153577758223 ## Epoch: Iteration #400 error is: 0.311297394600963 ## Epoch: Iteration #500 error is: 0.308030883555326 ## Epoch: Iteration #600 error is: 0.306276868368805 ## Epoch: Iteration #700 error is: 0.305068863247389 ## Epoch: Iteration #800 error is: 0.316067184162261 ## Epoch: Iteration #900 error is: 0.390582478147368 ## Epoch: Iteration #1000 error is: 0.733138528031683 iris_tsne20 &lt;- tsne(iris_data,perplexity = 20) ## sigma summary: Min. : 0.42864778740551 |1st Qu. : 0.523593962475894 |Median : 0.553545139847788 |Mean : 0.563823813379956 |3rd Qu. : 0.596877396756174 |Max. : 0.752227354673175 | ## Epoch: Iteration #100 error is: 13.8554899802217 ## Epoch: Iteration #200 error is: 0.267193105187663 ## Epoch: Iteration #300 error is: 0.258026493211793 ## Epoch: Iteration #400 error is: 0.255982847559468 ## Epoch: Iteration #500 error is: 0.255457132722014 ## Epoch: Iteration #600 error is: 0.255206779766628 ## Epoch: Iteration #700 error is: 0.255073505175481 ## Epoch: Iteration #800 error is: 0.254984447510208 ## Epoch: Iteration #900 error is: 0.254925919581817 ## Epoch: Iteration #1000 error is: 0.254884915049849 iris_tsne50 &lt;- tsne(iris_data,perplexity = 50) ## sigma summary: Min. : 0.565012665854053 |1st Qu. : 0.681985646004023 |Median : 0.713004330336136 |Mean : 0.716213420895748 |3rd Qu. : 0.74581655363904 |Max. : 0.874979764925049 | ## Epoch: Iteration #100 error is: 12.2772760250306 ## Epoch: Iteration #200 error is: 0.199074429457984 ## Epoch: Iteration #300 error is: 0.199045473260693 ## Epoch: Iteration #400 error is: 0.199045466144585 ## Epoch: Iteration #500 error is: 0.199045466143367 ## Epoch: Iteration #600 error is: 0.199045466143302 ## Epoch: Iteration #700 error is: 0.199045466143298 ## Epoch: Iteration #800 error is: 0.199045466143298 ## Epoch: Iteration #900 error is: 0.199045466143298 ## Epoch: Iteration #1000 error is: 0.199045466143298 iris_tsne100 &lt;- tsne(iris_data,perplexity = 100) ## sigma summary: Min. : 0.776385211439336 |1st Qu. : 0.927141154386403 |Median : 0.971370883716192 |Mean : 0.961326081014028 |3rd Qu. : 0.99555893656996 |Max. : 1.09859103718956 | ## Epoch: Iteration #100 error is: 9.57575274312879 ## Epoch: Iteration #200 error is: 0.0961571254562396 ## Epoch: Iteration #300 error is: 0.0961571252061174 ## Epoch: Iteration #400 error is: 0.0961571252061173 ## Epoch: Iteration #500 error is: 0.0961571252061173 ## Epoch: Iteration #600 error is: 0.0961571252061174 ## Epoch: Iteration #700 error is: 0.0961571252061173 ## Epoch: Iteration #800 error is: 0.0961571252061173 ## Epoch: Iteration #900 error is: 0.0961571252061173 ## Epoch: Iteration #1000 error is: 0.0961571252061173 par(mfrow=c(2,2)) plot(iris_tsne10[,1], iris_tsne10[,2], main = &quot;Perplexity = 10&quot;, col = species_cols, pch=16) plot(iris_tsne20[,1], iris_tsne20[,2], main = &quot;Perplexity = 20&quot;, col = species_cols, pch=16) plot(iris_tsne50[,1], iris_tsne50[,2], main = &quot;Perplexity = 50&quot;, col = species_cols, pch=16) plot(iris_tsne100[,1], iris_tsne100[,2], main = &quot;Perplexity = 100&quot;, col = species_cols, pch=16) Higher perplexity leads to higher spread in your data. Uniform Manifold Approximation and Projection (UMAP) UMAP is another dimension reduction method and it uses similar neighborhood approach as t-SNE except uses Riemannian geometry. Here we are going to use the package umap and the function umap. Let’s apply UMAP on the iris dataset and generate a UMAP plot. ## umap library(umap) iris_umap &lt;- umap(iris_data) str(iris_umap) ## List of 4 ## $ layout: num [1:150, 1:2] 13.6 14.4 15.1 15.2 13.8 ... ## $ data : num [1:150, 1:4] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. ..$ : NULL ## .. ..$ : chr [1:4] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; ## $ knn :List of 2 ## ..$ indexes : int [1:150, 1:15] 1 2 3 4 5 6 7 8 9 10 ... ## ..$ distances: num [1:150, 1:15] 0 0 0 0 0 0 0 0 0 0 ... ## ..- attr(*, &quot;class&quot;)= chr &quot;umap.knn&quot; ## $ config:List of 24 ## ..$ n_neighbors : int 15 ## ..$ n_components : int 2 ## ..$ metric : chr &quot;euclidean&quot; ## ..$ n_epochs : int 200 ## ..$ input : chr &quot;data&quot; ## ..$ init : chr &quot;spectral&quot; ## ..$ min_dist : num 0.1 ## ..$ set_op_mix_ratio : num 1 ## ..$ local_connectivity : num 1 ## ..$ bandwidth : num 1 ## ..$ alpha : num 1 ## ..$ gamma : num 1 ## ..$ negative_sample_rate: int 5 ## ..$ a : num 1.58 ## ..$ b : num 0.895 ## ..$ spread : num 1 ## ..$ random_state : int 1069612324 ## ..$ transform_state : int NA ## ..$ knn : logi NA ## ..$ knn_repeats : num 1 ## ..$ verbose : logi FALSE ## ..$ umap_learn_args : logi NA ## ..$ method : chr &quot;naive&quot; ## ..$ metric.function :function (m, origin, targets) ## ..- attr(*, &quot;class&quot;)= chr &quot;umap.config&quot; ## - attr(*, &quot;class&quot;)= chr &quot;umap&quot; par(mfrow=c(1,1)) plot(iris_umap$layout[,1], iris_umap$layout[,2], col = species_cols, pch = 19) # legend(&quot;topright&quot;, # legend = levels(mouse$FC), # col = species_cols, # pch = 19) Bonus Exercise For your exercise, try the following: Return to your crabs data Compute the principle components (PCs) for the numeric columns Plot these PCs and color them by species (“sp”) and sex Now compute 2 t-SNE components for these data and color by species and sex Finally compute 2 UMAP components for these data and color by species and sex Do any of these dimensionality reduction methods seem to segregate sex/species groups? "],["module-2-bonus-exercise-results.html", "Module 2: Bonus Exercise Results", " Module 2: Bonus Exercise Results PCA c_pcs = prcomp(crabs_meas) Plot PC projections (embeddings). pairs(c_pcs$x, col = c(&quot;orchid&quot;,&quot;forestgreen&quot;)[factor(crabs$sp)]) pairs(c_pcs$x, col = c(&quot;orchid&quot;,&quot;forestgreen&quot;)[factor(crabs$sex)]) tSNE: library(tsne) c_tsne10 = tsne(crabs_meas,perplexity = 10) ## sigma summary: Min. : 0.295392306171995 |1st Qu. : 0.424864940106807 |Median : 0.475900590252246 |Mean : 0.477263744443299 |3rd Qu. : 0.522810659014478 |Max. : 0.672971536327323 | ## Epoch: Iteration #100 error is: 14.4672285230991 ## Epoch: Iteration #200 error is: 0.463349314387704 ## Epoch: Iteration #300 error is: 0.439158237045742 ## Epoch: Iteration #400 error is: 0.430526070647267 ## Epoch: Iteration #500 error is: 0.426807882278888 ## Epoch: Iteration #600 error is: 0.424645881203122 ## Epoch: Iteration #700 error is: 0.423090939894809 ## Epoch: Iteration #800 error is: 0.421936633262779 ## Epoch: Iteration #900 error is: 0.421031497057072 ## Epoch: Iteration #1000 error is: 0.420291309419874 c_tsne20 = tsne(crabs_meas,perplexity = 20) ## sigma summary: Min. : 0.42069998064187 |1st Qu. : 0.505494820242659 |Median : 0.550282641638609 |Mean : 0.553782538032253 |3rd Qu. : 0.597446288884567 |Max. : 0.737568418500652 | ## Epoch: Iteration #100 error is: 14.5300186322588 ## Epoch: Iteration #200 error is: 0.377387625708084 ## Epoch: Iteration #300 error is: 0.367153827830651 ## Epoch: Iteration #400 error is: 0.364732329123619 ## Epoch: Iteration #500 error is: 0.363894789817051 ## Epoch: Iteration #600 error is: 0.363449025593383 ## Epoch: Iteration #700 error is: 0.363171287112465 ## Epoch: Iteration #800 error is: 0.362966749851921 ## Epoch: Iteration #900 error is: 0.362817955980737 ## Epoch: Iteration #1000 error is: 0.362702791983383 c_tsne50 = tsne(crabs_meas,perplexity = 50) ## sigma summary: Min. : 0.539839363698465 |1st Qu. : 0.634067694694373 |Median : 0.675230651916411 |Mean : 0.676426601512199 |3rd Qu. : 0.712708887622463 |Max. : 0.85041386579969 | ## Epoch: Iteration #100 error is: 13.0896799891218 ## Epoch: Iteration #200 error is: 0.378605904052177 ## Epoch: Iteration #300 error is: 0.358804456943581 ## Epoch: Iteration #400 error is: 0.35880443730145 ## Epoch: Iteration #500 error is: 0.358804437300813 ## Epoch: Iteration #600 error is: 0.358804437300813 ## Epoch: Iteration #700 error is: 0.358804437300813 ## Epoch: Iteration #800 error is: 0.358804437300812 ## Epoch: Iteration #900 error is: 0.358804437300813 ## Epoch: Iteration #1000 error is: 0.358804437300813 c_tsne100 = tsne(crabs_meas,perplexity = 100) ## sigma summary: Min. : 0.689338665294285 |1st Qu. : 0.801156853023062 |Median : 0.838030059692607 |Mean : 0.83585263946599 |3rd Qu. : 0.869043547272454 |Max. : 1.00462478171883 | ## Epoch: Iteration #100 error is: 11.141758165936 ## Epoch: Iteration #200 error is: 0.219304650148535 ## Epoch: Iteration #300 error is: 0.219304646870605 ## Epoch: Iteration #400 error is: 0.219304646870604 ## Epoch: Iteration #500 error is: 0.219304646870604 ## Epoch: Iteration #600 error is: 0.219304646870604 ## Epoch: Iteration #700 error is: 0.219304646870604 ## Epoch: Iteration #800 error is: 0.219304646870604 ## Epoch: Iteration #900 error is: 0.219304646870604 ## Epoch: Iteration #1000 error is: 0.219304646870604 sex_cols = c(“orchid”,“forestgreen”)[factor(crabs$sex)] Color-code tSNE plot by species, try various perplexity levels: species_cols = c(&quot;orchid&quot;,&quot;forestgreen&quot;)[factor(crabs$sp)] par(mfrow=c(2,2)) plot(c_tsne10[,1], c_tsne10[,2], main = &quot;Perplexity = 10&quot;, col = species_cols) plot(c_tsne20[,1], c_tsne20[,2], main = &quot;Perplexity = 20&quot;, col = species_cols) plot(c_tsne50[,1], c_tsne50[,2], main = &quot;Perplexity = 50&quot;, col = species_cols) plot(c_tsne100[,1], c_tsne100[,2], main = &quot;Perplexity = 100&quot;, col = species_cols) Now do the same, but colour-code for sex: sex_cols = c(&quot;orchid&quot;,&quot;forestgreen&quot;)[factor(crabs$sex)] par(mfrow=c(2,2)) plot(c_tsne10[,1], c_tsne10[,2], main = &quot;Perplexity = 10&quot;, col = sex_cols) plot(c_tsne20[,1], c_tsne20[,2], main = &quot;Perplexity = 20&quot;, col = sex_cols) plot(c_tsne50[,1], c_tsne50[,2], main = &quot;Perplexity = 50&quot;, col = sex_cols) plot(c_tsne100[,1], c_tsne100[,2], main = &quot;Perplexity = 100&quot;, col = sex_cols) Run UMAP library(umap) c_umap &lt;- umap(crabs_meas) str(c_umap) ## List of 4 ## $ layout: num [1:200, 1:2] 2.77 2.61 2.57 2.96 2.95 ... ## ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. ..$ : chr [1:200] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## .. ..$ : NULL ## $ data : num [1:200, 1:5] 8.1 8.8 9.2 9.6 9.8 10.8 11.1 11.6 11.8 11.8 ... ## ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. ..$ : chr [1:200] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## .. ..$ : chr [1:5] &quot;FL&quot; &quot;RW&quot; &quot;CL&quot; &quot;CW&quot; ... ## $ knn :List of 2 ## ..$ indexes : int [1:200, 1:15] 1 2 3 4 5 6 7 8 9 10 ... ## .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. ..$ : chr [1:200] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## .. .. ..$ : NULL ## ..$ distances: num [1:200, 1:15] 0 0 0 0 0 0 0 0 0 0 ... ## .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. ..$ : chr [1:200] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## .. .. ..$ : NULL ## ..- attr(*, &quot;class&quot;)= chr &quot;umap.knn&quot; ## $ config:List of 24 ## ..$ n_neighbors : int 15 ## ..$ n_components : int 2 ## ..$ metric : chr &quot;euclidean&quot; ## ..$ n_epochs : int 200 ## ..$ input : chr &quot;data&quot; ## ..$ init : chr &quot;spectral&quot; ## ..$ min_dist : num 0.1 ## ..$ set_op_mix_ratio : num 1 ## ..$ local_connectivity : num 1 ## ..$ bandwidth : num 1 ## ..$ alpha : num 1 ## ..$ gamma : num 1 ## ..$ negative_sample_rate: int 5 ## ..$ a : num 1.58 ## ..$ b : num 0.895 ## ..$ spread : num 1 ## ..$ random_state : int 118237298 ## ..$ transform_state : int NA ## ..$ knn : logi NA ## ..$ knn_repeats : num 1 ## ..$ verbose : logi FALSE ## ..$ umap_learn_args : logi NA ## ..$ method : chr &quot;naive&quot; ## ..$ metric.function :function (m, origin, targets) ## ..- attr(*, &quot;class&quot;)= chr &quot;umap.config&quot; ## - attr(*, &quot;class&quot;)= chr &quot;umap&quot; par(mfrow=c(1,2)) plot(c_umap$layout[,1], c_umap$layout[,2], col = species_cols, pch = 19, main = &quot;Colored by species&quot;) plot(c_umap$layout[,1], c_umap$layout[,2], col = sex_cols, pch = 19, main = &quot;Colored by sex&quot;) "],["module-3-generalized-linear-models.html", "Module 3: Generalized Linear Models Essential R: Reading tables from files, merging, basic data exploration Explore missing data Essential R: Plots with ggplot2 Fit binary response variable using glm() and logistic regression Bonus Exercise", " Module 3: Generalized Linear Models In this module we’re going to cover: Reading data from files and evaluating missingness Creating publication-quality plots with ggplot2 Fitting models with binary outcomes using generalized linear models Essential R: Reading tables from files, merging, basic data exploration For this we’re going to use two data files available in the course data directory. Download these for use and put them in your R working directory. tomerge1.csv : comma-separated values tomerge2.txt : space-delimited values Use read.delim() to read in tables. Note the use of the sep= parameter to indicate what the column separator is: x1 &lt;- read.delim(&quot;AUR2024_data/tomerge1.csv&quot;,sep=&quot;,&quot;) head(x1) ## Sample_ID Exposure Biomarker_value ## 1 A 0 35 ## 2 B 0 22 ## 3 C 0 91 ## 4 D 0 3 ## 5 E 1 56 ## 6 F 1 37 x2 &lt;- read.delim(&quot;AUR2024_data/tomerge2.txt&quot;,sep=&quot; &quot;) head(x2) ## sampleID Exposure_level ## 1 A 0.65405517 ## 2 B 0.67202852 ## 3 C 0.88646372 ## 4 D 0.28433256 ## 5 E 0.04166839 ## 6 F 0.45263534 ## Biomarker2_detected ## 1 1 ## 2 0 ## 3 1 ## 4 0 ## 5 0 ## 6 1 Use merge() to combine the two tables by sample ID. Note the use of by.x and by.y to tell merge() which columns are equivalent: x_merge &lt;- merge(x1, x2, by.x = &quot;Sample_ID&quot;, by.y = &quot;sampleID&quot;) head(x_merge) ## Sample_ID Exposure Biomarker_value ## 1 A 0 35 ## 2 B 0 22 ## 3 C 0 91 ## 4 D 0 3 ## 5 E 1 56 ## 6 F 1 37 ## Exposure_level Biomarker2_detected ## 1 0.65405517 1 ## 2 0.67202852 0 ## 3 0.88646372 1 ## 4 0.28433256 0 ## 5 0.04166839 0 ## 6 0.45263534 1 We’re going to use a popular dataset for data analysis, pertaining to survival of passengers aboard the Titanic. Download the dataset here and copy it into your working directory. Let’s read in the data from a file: dat &lt;- read.delim( &quot;AUR2024_data/titanic.csv&quot;, sep=&quot;,&quot; # indicate the column separator ) Examine the columns: head(dat) ## PassengerId Survived Pclass ## 1 1 0 3 ## 2 2 1 1 ## 3 3 1 3 ## 4 4 1 1 ## 5 5 0 3 ## 6 6 0 3 ## Name ## 1 Braund, Mr. Owen Harris ## 2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) ## 3 Heikkinen, Miss. Laina ## 4 Futrelle, Mrs. Jacques Heath (Lily May Peel) ## 5 Allen, Mr. William Henry ## 6 Moran, Mr. James ## Sex Age SibSp Parch ## 1 male 22 1 0 ## 2 female 38 1 0 ## 3 female 26 0 0 ## 4 female 35 1 0 ## 5 male 35 0 0 ## 6 male NA 0 0 ## Ticket Fare Cabin ## 1 A/5 21171 7.2500 ## 2 PC 17599 71.2833 C85 ## 3 STON/O2. 3101282 7.9250 ## 4 113803 53.1000 C123 ## 5 373450 8.0500 ## 6 330877 8.4583 ## Embarked ## 1 S ## 2 C ## 3 S ## 4 S ## 5 S ## 6 Q Some of the columns are categorical, use table() to look at the tallies: Examine the columns: table(dat$Survived) ## ## 0 1 ## 549 342 table(dat$Pclass) ## ## 1 2 3 ## 216 184 491 Use summary() to look at continuous-valued data: summary(dat$Age) ## Min. 1st Qu. Median Mean ## 0.42 20.12 28.00 29.70 ## 3rd Qu. Max. NA&#39;s ## 38.00 80.00 177 Notice that there are 177 NA (missing) values for age. Let’s visualize the missing data more systematically. Explore missing data For this let’s use a little script that converts a table into black and white squares to visualize missing data. For this, install the plotrix package if (!requireNamespace(&quot;plotrix&quot;, quietly = TRUE)) install.packages(&quot;plotrix&quot;) suppressMessages(library(plotrix)) #&#39; show data missingness as a chequered matrix #&#39; #&#39; @param x (matrix) data matrix. #&#39; @param outFile (char) path to file for printing graph #&#39; @param wd (numeric) width in inches #&#39; @param ht (numeric) height in inches #&#39; @return plots missingness matrix to file #&#39; @import plotrix #&#39; @export plotMissMat &lt;- function(x,xlab=&quot;columns&quot;, ylab=&quot;rows&quot;,border=NA) { x &lt;- !is.na(x) class(x) &lt;- &quot;numeric&quot; color2D.matplot(x,show.values=FALSE,axes=FALSE, cs1=c(1,0),cs2=c(1,0),cs3=c(1,0),border=border, cex=0.8, xlab=xlab,ylab=ylab) } Let’s look at the missingness in the Titanic dataset. Missing data is shown as a white cell, and non-missing data is shown in black. plotMissMat(dat) We can see a column with many missing values. This is probably the “age” data. Let’s count the number of missing values on a per-column level. For this we combine is.na(), which returns a TRUE/FALSE value for NA values, and colSums() which adds up the TRUE values down the columns. colSums(is.na(dat)) ## PassengerId Survived Pclass ## 0 0 0 ## Name Sex Age ## 0 0 177 ## SibSp Parch Ticket ## 0 0 0 ## Fare Cabin Embarked ## 0 0 0 This confirms that Age is the only column with missing data. Now let’s explore the data using plots. Essential R: Plots with ggplot2 ggplot2 is a popular plotting package that uses an additive paradigm to build plots. Useful websites: * ggplot2 cheatsheet * The ggplot2 website is a wealth of reference information, so here we just touch on the basics to get you started. Anytime you need to generate a specific kind of plot, the website will most likely have documentation for how to achieve it. Let’s start by creating a scatterplot with two continuous variables. For this let’s load a dataset measuring statistics around quality of life in US states in the late 70’s: state.x77 &lt;- as.data.frame(state.x77) head(state.x77) ## Population Income ## Alabama 3615 3624 ## Alaska 365 6315 ## Arizona 2212 4530 ## Arkansas 2110 3378 ## California 21198 5114 ## Colorado 2541 4884 ## Illiteracy Life Exp Murder ## Alabama 2.1 69.05 15.1 ## Alaska 1.5 69.31 11.3 ## Arizona 1.8 70.55 7.8 ## Arkansas 1.9 70.66 10.1 ## California 1.1 71.71 10.3 ## Colorado 0.7 72.06 6.8 ## HS Grad Frost Area ## Alabama 41.3 20 50708 ## Alaska 66.7 152 566432 ## Arizona 58.1 15 113417 ## Arkansas 39.9 65 51945 ## California 62.6 20 156361 ## Colorado 63.9 166 103766 Create a base plot using the ggplot function. Then “add” a scatterplot to it. Notice that the plot has been assigned to a variable named p. This setup is standard for ggplot2 and allows multiple visualizations to be applied to the same base plot. We use aes to tell ggplot what the x and y axes are, and later, if we want to colour-code by a particular column. library(ggplot2) p &lt;- ggplot(state.x77, aes(x = Illiteracy,y = Income) ) p &lt;- p + geom_point() # scatter plot p Now let’s add confidence intervals: p + geom_smooth() ## `geom_smooth()` using method = ## &#39;loess&#39; and formula = &#39;y ~ x&#39; It looks like there is a negative relationship between illiteracy and income. We can confirm this by looking at correlation: x &lt;- state.x77$Illiteracy y &lt;- state.x77$Income cor.test(x,y) ## ## Pearson&#39;s product-moment ## correlation ## ## data: x and y ## t = -3.3668, df = 48, p-value = ## 0.001505 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.6378257 -0.1807128 ## sample estimates: ## cor ## -0.4370752 cor.test(x,y)$p.value ## [1] 0.001505073 Let’s now examine categorical variables. In the titanic set, let’s look at the fare paid based on passenger class: p &lt;- ggplot(dat) p + geom_boxplot( aes(x = factor(Pclass), # &quot;factor()&quot; makes a data column a categorical variable y = Fare)) We can use barplots to examine counts and proportions. Let’s look at number of survivors, split by passenger class. Here the fill command is used to to split each barplot by the category, “Survived”. So you can see number of passengers by “Pclass” split by survival. p + geom_bar( aes(fill=factor(Survived), x = Pclass) ) The plot above shows count data. Let’s convert this to proportions. We can see that the fraction of non-survivors in “Class 3” is high. p + geom_bar( aes(fill=factor(Survived), x = Pclass), position = &quot;fill&quot; ) How about males versus females? p + geom_bar( aes(fill=factor(Survived), x = Sex), position = &quot;fill&quot; ) Exercise for later: Try other ggplot functions on these data or on a small data table of your project. (avoid using large genomics datasets, because those are going to be harder to interpret) Fit binary response variable using glm() and logistic regression Let’s fit a model to a binary outcome. For this we load a dataset that measures physiological variables in a cohort of Pima Indians. library(mlbench) data(PimaIndiansDiabetes2) # type ?PimaIndiansDiabetes2 to learn more about the dataset. dat &lt;- PimaIndiansDiabetes2 head(dat) ## pregnant glucose pressure triceps ## 1 6 148 72 35 ## 2 1 85 66 29 ## 3 8 183 64 NA ## 4 1 89 66 23 ## 5 0 137 40 35 ## 6 5 116 74 NA ## insulin mass pedigree age diabetes ## 1 NA 33.6 0.627 50 pos ## 2 NA 26.6 0.351 31 neg ## 3 NA 23.3 0.672 32 pos ## 4 94 28.1 0.167 21 neg ## 5 168 43.1 2.288 33 pos ## 6 NA 25.6 0.201 30 neg Let’s look at the impact of blood glucose levels on diabetes diagnosis. First let’s make a scatterplot. Could there be a relationship? p &lt;- ggplot(dat, aes(x = glucose, y = factor(diabetes))) p + geom_point() ## Warning: Removed 5 rows containing missing ## values or values outside the scale ## range (`geom_point()`). Could this be fit with a linear model? Is there a continuous line that could reasonably fit the data? p &lt;- ggplot(dat, aes(x = glucose, y = factor(diabetes))) p + geom_point() + geom_smooth() ## `geom_smooth()` using method = ## &#39;loess&#39; and formula = &#39;y ~ x&#39; ## Warning: Removed 5 rows containing non-finite ## outside the scale range ## (`stat_smooth()`). ## Warning: Removed 5 rows containing missing ## values or values outside the scale ## range (`geom_point()`). This is a situation where a logistic regression model would be an appropriate choice because of the binary outcome. We’re going to use glm() to fit a model to these data: mod &lt;- glm(factor(diabetes)~glucose, dat, family = &quot;binomial&quot; # set to model binary outcome ) summary(mod) ## ## Call: ## glm(formula = factor(diabetes) ~ glucose, family = &quot;binomial&quot;, ## data = dat) ## ## Coefficients: ## Estimate Std. Error ## (Intercept) -5.715088 0.438100 ## glucose 0.040634 0.003382 ## z value Pr(&gt;|z|) ## (Intercept) -13.04 &lt;2e-16 *** ## glucose 12.01 &lt;2e-16 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 ## &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 986.70 on 762 degrees of freedom ## Residual deviance: 786.56 on 761 degrees of freedom ## (5 observations deleted due to missingness) ## AIC: 790.56 ## ## Number of Fisher Scoring iterations: 4 Which factors explain a diabetes diagnosis? What if we include a couple other factors? mod &lt;- glm(factor(diabetes)~ glucose + pregnant + age + pressure + triceps, dat, family = &quot;binomial&quot;) summary(mod) ## ## Call: ## glm(formula = factor(diabetes) ~ glucose + pregnant + age + pressure + ## triceps, family = &quot;binomial&quot;, data = dat) ## ## Coefficients: ## Estimate Std. Error ## (Intercept) -7.6685706 0.8451262 ## glucose 0.0365926 0.0041105 ## pregnant 0.0972493 0.0417560 ## age 0.0249707 0.0135945 ## pressure -0.0009321 0.0099322 ## triceps 0.0420045 0.0117044 ## z value Pr(&gt;|z|) ## (Intercept) -9.074 &lt; 2e-16 *** ## glucose 8.902 &lt; 2e-16 *** ## pregnant 2.329 0.019860 * ## age 1.837 0.066235 . ## pressure -0.094 0.925230 ## triceps 3.589 0.000332 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 ## &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 678.40 on 533 degrees of freedom ## Residual deviance: 494.38 on 528 degrees of freedom ## (234 observations deleted due to missingness) ## AIC: 506.38 ## ## Number of Fisher Scoring iterations: 5 Note: This morning’s session only intends to introduce you to fitting non-linear models. In practice you may need to do more work to test multiple models to ascertain best fits your data, using measures such as goodness-of-fit. You will also likely compute odds ratio (odds of increased Y per unit increase X), which is out of scope for the current tutorial. We strongly recommend that you learn these topics before applying these methods to your own data. Bonus Exercise Now let’s apply the ideas above to a dataset for classifying a breast cell as being either benign or malignant. data(BreastCancer) bc &lt;- BreastCancer for (k in 2:10) # altered for current lab bc[,k] &lt;- as.numeric(bc[,k]) head(bc) ## Id Cl.thickness Cell.size ## 1 1000025 5 1 ## 2 1002945 5 4 ## 3 1015425 3 1 ## 4 1016277 6 8 ## 5 1017023 4 1 ## 6 1017122 8 10 ## Cell.shape Marg.adhesion ## 1 1 1 ## 2 4 5 ## 3 1 1 ## 4 8 1 ## 5 1 3 ## 6 10 8 ## Epith.c.size Bare.nuclei ## 1 2 1 ## 2 7 10 ## 3 2 2 ## 4 3 4 ## 5 2 1 ## 6 7 10 ## Bl.cromatin Normal.nucleoli Mitoses ## 1 3 1 1 ## 2 3 2 1 ## 3 3 1 1 ## 4 3 7 1 ## 5 3 1 1 ## 6 9 7 1 ## Class ## 1 benign ## 2 benign ## 3 benign ## 4 benign ## 5 benign ## 6 malignant Learn more about the dataset: ?BreastCancer For your exercise, answer the following questions: Is there missing data? Which columns are Use plots to explore the relationship between explanatory variables. Fit a logistic model to identify which factors explain class (benign vs. malignant). "],["module-3-bonus-exercise-results.html", "Module 3: Bonus Exercise Results", " Module 3: Bonus Exercise Results data(BreastCancer) bc &lt;- BreastCancer for (k in 2:10) # altered for current lab bc[,k] &lt;- as.numeric(bc[,k]) head(bc) ## Id Cl.thickness Cell.size ## 1 1000025 5 1 ## 2 1002945 5 4 ## 3 1015425 3 1 ## 4 1016277 6 8 ## 5 1017023 4 1 ## 6 1017122 8 10 ## Cell.shape Marg.adhesion ## 1 1 1 ## 2 4 5 ## 3 1 1 ## 4 8 1 ## 5 1 3 ## 6 10 8 ## Epith.c.size Bare.nuclei ## 1 2 1 ## 2 7 10 ## 3 2 2 ## 4 3 4 ## 5 2 1 ## 6 7 10 ## Bl.cromatin Normal.nucleoli Mitoses ## 1 3 1 1 ## 2 3 2 1 ## 3 3 1 1 ## 4 3 7 1 ## 5 3 1 1 ## 6 9 7 1 ## Class ## 1 benign ## 2 benign ## 3 benign ## 4 benign ## 5 benign ## 6 malignant Explore missingness: suppressMessages(require(plotrix)) #&#39; show data missingness as a chequered matrix #&#39; #&#39; @param x (matrix) data matrix. #&#39; @param outFile (char) path to file for printing graph #&#39; @param wd (numeric) width in inches #&#39; @param ht (numeric) height in inches #&#39; @return plots missingness matrix to file #&#39; @import plotrix #&#39; @export plotMissMat &lt;- function(x,xlab=&quot;columns&quot;, ylab=&quot;rows&quot;,border=NA) { x &lt;- !is.na(x) class(x) &lt;- &quot;numeric&quot; color2D.matplot(x,show.values=FALSE,axes=FALSE, cs1=c(1,0),cs2=c(1,0),cs3=c(1,0),border=border, cex=0.8, xlab=xlab,ylab=ylab) } Explore missingness: plotMissMat(bc) colSums(is.na(bc)) ## Id Cl.thickness ## 0 0 ## Cell.size Cell.shape ## 0 0 ## Marg.adhesion Epith.c.size ## 0 0 ## Bare.nuclei Bl.cromatin ## 16 0 ## Normal.nucleoli Mitoses ## 0 0 ## Class ## 0 Plot relationship between variables require(ggplot2) ggplot(bc,aes(Cell.size,Normal.nucleoli)) + geom_point() ggplot(bc) + geom_boxplot(aes(factor(Class), Normal.nucleoli)) ggplot(bc) + geom_boxplot(aes(factor(Class), Cl.thickness)) ggplot(bc) + geom_boxplot(aes(factor(Class), Bare.nuclei)) ## Warning: Removed 16 rows containing non-finite ## outside the scale range ## (`stat_boxplot()`). Fit a binary outcome model: mod &lt;- glm( Class ~ Cl.thickness + Bare.nuclei + Normal.nucleoli + Mitoses + Bl.cromatin, bc, family=&quot;binomial&quot;) summary(mod) ## ## Call: ## glm(formula = Class ~ Cl.thickness + Bare.nuclei + Normal.nucleoli + ## Mitoses + Bl.cromatin, family = &quot;binomial&quot;, data = bc) ## ## Coefficients: ## Estimate Std. Error ## (Intercept) -9.69635 0.98763 ## Cl.thickness 0.63413 0.12267 ## Bare.nuclei 0.50988 0.08228 ## Normal.nucleoli 0.35765 0.10040 ## Mitoses 0.52677 0.27923 ## Bl.cromatin 0.61398 0.14225 ## z value Pr(&gt;|z|) ## (Intercept) -9.818 &lt; 2e-16 *** ## Cl.thickness 5.169 2.35e-07 *** ## Bare.nuclei 6.197 5.76e-10 *** ## Normal.nucleoli 3.562 0.000368 *** ## Mitoses 1.887 0.059223 . ## Bl.cromatin 4.316 1.59e-05 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 ## &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 884.35 on 682 degrees of freedom ## Residual deviance: 120.81 on 677 degrees of freedom ## (16 observations deleted due to missingness) ## AIC: 132.81 ## ## Number of Fisher Scoring iterations: 8 "],["module-4-finding-differentially-expressed-genes-from-rnaseq-data.html", "Module 4: Finding differentially expressed genes from RNAseq data Bonus Exercise", " Module 4: Finding differentially expressed genes from RNAseq data In this exercise, we will use edgeR to call differentially-expressed genes. For the example we will use an RNAseq dataset from a treatment-vehicle design. If you haven’t already done so, install the airway dataset: # BiocManager::install(&quot;airway&quot;) These data are from the paper: Himes BE, Jiang X, Wagner P, Hu R, Wang Q, Klanderman B, Whitaker RM, Duan Q, Lasky-Su J, Nikolos C, Jester W, Johnson M, Panettieri R Jr, Tantisira KG, Weiss ST, Lu Q. “RNA-Seq Transcriptome Profiling Identifies CRISPLD2 as a Glucocorticoid Responsive Gene that Modulates Cytokine Function in Airway Smooth Muscle Cells.” PLoS One. 2014 Jun 13;9(6):e99625. PMID: 24926665. From the abstract of the original paper: “Using RNA-Seq, a high-throughput sequencing method, we characterized transcriptomic changes in four primary human ASM cell lines that were treated with dexamethasone - a potent synthetic glucocorticoid (1 micromolar for 18 hours).” Let’s load the data suppressMessages(library(airway)) ## Warning: package &#39;GenomeInfoDb&#39; was ## built under R version 4.3.3 data(airway) These data happen to be in a Bioconductor-specific format, so we use the special functions, assay() and colData() to get the expression data and sample information. xpr &lt;- assay(airway) samples &lt;- colData(airway) Questions: How many samples are in this experiment? How many genes were measured? How many treatment groups are there (dex column)? Let’s created a DGEList object (DGE stands for “Differential Gene Expression”). This object is what we will use for our differential expression analysis. Note: Make phenotype of interest categorical. In R that means converting to a factor type with categorical levels. You can think of levels as ordinal representations (e.g., first level = 1, second = 2, etc., ) If levels= are not set, the default uses alphabetical order. We recommend explicitly setting levels so that there are no assumptions. Load the edgeR package: suppressMessages(library(edgeR)) Let’s create a DGEList object for the differential expression analysis. Note that group must be a categorical variable (use factor() to convert it to one): group &lt;- factor(samples$dex) dge &lt;- DGEList( counts = xpr, group = group ) Remove low-count genes: To filter low count genes, we’re going to use a normalized count measure called cpm (counts per million). We are going to keep genes with 100 or greater counts per million for at least two samples: head(dge$counts) ## SRR1039508 SRR1039509 ## ENSG00000000003 679 448 ## ENSG00000000005 0 0 ## ENSG00000000419 467 515 ## ENSG00000000457 260 211 ## ENSG00000000460 60 55 ## ENSG00000000938 0 0 ## SRR1039512 SRR1039513 ## ENSG00000000003 873 408 ## ENSG00000000005 0 0 ## ENSG00000000419 621 365 ## ENSG00000000457 263 164 ## ENSG00000000460 40 35 ## ENSG00000000938 2 0 ## SRR1039516 SRR1039517 ## ENSG00000000003 1138 1047 ## ENSG00000000005 0 0 ## ENSG00000000419 587 799 ## ENSG00000000457 245 331 ## ENSG00000000460 78 63 ## ENSG00000000938 1 0 ## SRR1039520 SRR1039521 ## ENSG00000000003 770 572 ## ENSG00000000005 0 0 ## ENSG00000000419 417 508 ## ENSG00000000457 233 229 ## ENSG00000000460 76 60 ## ENSG00000000938 0 0 Look at counts per million using cpm: cpm(dge)[1:5,1:5] ## SRR1039508 SRR1039509 ## ENSG00000000003 32.900521 23.817776 ## ENSG00000000005 0.000000 0.000000 ## ENSG00000000419 22.628193 27.379809 ## ENSG00000000457 12.598138 11.217747 ## ENSG00000000460 2.907263 2.924057 ## SRR1039512 SRR1039513 ## ENSG00000000003 34.439705 26.906868 ## ENSG00000000005 0.000000 0.000000 ## ENSG00000000419 24.498347 24.071095 ## ENSG00000000457 10.375306 10.815506 ## ENSG00000000460 1.577993 2.308187 ## SRR1039516 ## ENSG00000000003 46.546998 ## ENSG00000000005 0.000000 ## ENSG00000000419 24.009743 ## ENSG00000000457 10.021102 ## ENSG00000000460 3.190392 This next line is a bit complex so let’s unpack it: We are using cpm(dge)&gt;100 as a logical test (“which genes have cpm &gt; 100?”). For each gene, we want that test to be true for at least two samples. For this we use rowSums() to add up how many samples meet that criteria. dim(dge) #before ## [1] 63677 8 # keep genes which have cpm&gt;100 in 2 or more samples tokeep &lt;- rowSums(cpm(dge)&gt;100) &gt;= 2 # now filter for these dge &lt;- dge[tokeep,keep.lib.sizes = FALSE] # how many genes do we have left? dim(dge) #after ## [1] 2086 8 Normalize the data: dge &lt;- calcNormFactors(dge) Visualize the data: plotMDS( dge, col=as.numeric(dge$samples$group), pch=16 ) legend( &quot;bottomleft&quot;, as.character(unique(dge$samples$group)), col=c(1,2), pch=16 ) Let’s create a model design to identify genes with a group effect: group &lt;- dge$samples$group mod &lt;- model.matrix(~group) Estimate variation (“dispersion”) for each gene: dge &lt;- estimateDisp(dge, mod) Call differentially expressed genes. Here we: fit a model for each gene, using glmFit we have built in an estimate of gene-wise dispersion to better identify treatment effect (or “contrast”) for each gene, we run a likelihood ratio test which compares which model fits the data better: a null model (treatment effect = 0) or a full model (treatment effect is non-zero) Note that coef=2 fetches the effects for the treatment effect; coef=1 would fetch effects of the intercept term.   fit &lt;- glmFit(dge,mod) diffEx &lt;- glmLRT(fit, coef = 2) # get coefficients for group term Look at the top 10 differentially expressed genes: tt &lt;- topTags(diffEx, n=10) tt ## Coefficient: groupuntrt ## logFC logCPM ## ENSG00000152583 -4.512108 5.950547 ## ENSG00000178695 2.592010 7.433587 ## ENSG00000120129 -2.857535 7.727638 ## ENSG00000189221 -3.213455 7.183776 ## ENSG00000125148 -2.110664 7.835949 ## ENSG00000162614 -1.938280 8.397283 ## ENSG00000101347 -3.764745 9.620058 ## ENSG00000096060 -3.849662 7.313033 ## ENSG00000134686 -1.294763 7.426574 ## ENSG00000166741 -2.072008 8.859215 ## LR PValue ## ENSG00000152583 190.5712 2.385925e-43 ## ENSG00000178695 171.7187 3.117449e-39 ## ENSG00000120129 167.2022 3.021823e-38 ## ENSG00000189221 162.3746 3.426477e-37 ## ENSG00000125148 156.1280 7.937896e-36 ## ENSG00000162614 135.2052 2.977497e-31 ## ENSG00000101347 128.9686 6.889897e-30 ## ENSG00000096060 123.8841 8.930961e-29 ## ENSG00000134686 121.0663 3.695702e-28 ## ENSG00000166741 114.0478 1.272045e-26 ## FDR ## ENSG00000152583 4.977039e-40 ## ENSG00000178695 3.251499e-36 ## ENSG00000120129 2.101174e-35 ## ENSG00000189221 1.786908e-34 ## ENSG00000125148 3.311690e-33 ## ENSG00000162614 1.035176e-28 ## ENSG00000101347 2.053189e-27 ## ENSG00000096060 2.328748e-26 ## ENSG00000134686 8.565816e-26 ## ENSG00000166741 2.653486e-24 For the next steps we’re going to need stats on all the genes we’ve tested. So let’s get those: tt &lt;- as.data.frame( topTags(diffEx, n=nrow(dge) ) ) A QQplot directly compares the pvalues from our statistical tests to the expected values from a random uniform distribution (p-value selected at random). A deviation from the x=y line (diagonal) towards the top indicates an enrichment of signal. qqplot( tt$PValue, runif(nrow(tt)), # randomly sample from uniform distribution xlab=&quot;p-values from real data&quot;, ylab=&quot;Randomly-sampled values from Uniform distribution&quot;, pch=16,cex=0.5 ) # x=y line as reference abline(0,1,col=&quot;red&quot;) Now let’s call differentially expressed genes using the decideTestDGE() function and use summary() to see how many genes are upregulated (value +1), downregulated (value -1) and not called as changed (value 0) diffEx2 &lt;- decideTestsDGE(diffEx, adjust.method=&quot;BH&quot;, p.value=0.05 ) summary(diffEx2) ## groupuntrt ## Down 317 ## NotSig 1553 ## Up 216 A volcano plot can help visualize effect magnitude - log2 fold-change or log2FC in the table ` against the corresponding p-value. Here we create a volcano plot, and colour-code upregulated genes in red, and downregulated genes in blue. Note that we are combining two different tables, tt and diffEx2 so we need to ensure the order is the same. Otherwise the colours will be in the wrong order (try it for yourself!). midx &lt;- match(rownames(tt), rownames(diffEx2)) diffEx2 &lt;- diffEx2[midx,] cols &lt;- rep(&quot;black&quot;,nrow(diffEx2)) cols[which(diffEx2&gt;0 )] &lt;- &quot;red&quot; cols[which(diffEx2&lt;0)] &lt;- &quot;blue&quot; # volcano plot plot(tt$logFC,-log10(tt$PValue),pch=16, col=cols) abline(v=0,lty=3) Finally we can write our differential expression results out to file: write.table(tt,file=&quot;diffEx.results.txt&quot;, sep=&quot;\\t&quot;, col=TRUE, row=TRUE, quote=FALSE ) Bonus Exercise Install the yeastRNASeq package from Bioconductor and library it into your environment Import the geneLevelData using: data(\"geneLevelData\") Learn about this data and then put it through the same workflow we just did for the breast cancer: Create a new DGEList object with your gene counts Filter genes with CPM &gt; 25 in at least two samples Normalize and plot your data Create a model matrix for analysis Fit your model How many significantly up-regulated genes are there at the 5% FDR level? How many significantly down-regulated genes? How many in total Create a volcano plot Bonus: Create a histogram of p-values. Is there a signal? Is there anything about the data that might make you question the results? "],["module-4-bonus-exercise-results.html", "Module 4: Bonus Exercise Results", " Module 4: Bonus Exercise Results if (!requireNamespace(&quot;yeastRNASeq&quot;, quietly = TRUE)) BiocManager::install(&quot;yeastRNASeq&quot;) library(yeastRNASeq) data(geneLevelData) gene_keep &lt;- rowMeans(geneLevelData) &gt; 2 # What genes pass this threshold? filtered &lt;- geneLevelData[gene_keep,] str(filtered) ## &#39;data.frame&#39;: 6113 obs. of 4 variables: ## $ mut_1: num 38 31 55 29 189 33 23 51 21 4 ... ## $ mut_2: num 39 33 52 26 180 41 13 52 12 5 ... ## $ wt_1 : num 35 40 47 5 151 32 73 54 3 4 ... ## $ wt_2 : num 34 26 47 5 180 29 63 45 3 8 ... # as.matrix(filtered): the count data in the right class # phenoData: The sample information group &lt;- factor(rep(c(&quot;Mut&quot;, &quot;WT&quot;),each=2), levels = c(&quot;WT&quot;,&quot;Mut&quot;)) y &lt;- DGEList(as.matrix(filtered), group = group) ## matrix of experimental design mod = model.matrix(~group, y) ## Normalize data y &lt;- calcNormFactors(y, method = &quot;upperquartile&quot;) y &lt;- estimateDisp(y, mod) fit = glmFit(y, mod) lrt = glmLRT(fit, coef = 2) diffEx2 &lt;- decideTestsDGE(lrt, adjust.method=&quot;BH&quot;, p.value=0.05 ) table(diffEx2) ## diffEx2 ## -1 0 1 ## 1282 3147 1684 DEGS = topTags(lrt, n=nrow(y))$table ## check out differentially expressed genes head(DEGS) ## logFC logCPM LR ## snR59 8.918990 10.146912 2142.162 ## snR49 8.541859 9.773155 1652.824 ## snR41 7.757413 11.217747 4287.880 ## YPL198W 7.499306 10.244671 2224.245 ## snR76 7.191421 9.776288 1602.758 ## snR81 7.028955 10.497704 2595.722 ## PValue FDR ## snR59 0 0 ## snR49 0 0 ## snR41 0 0 ## YPL198W 0 0 ## snR76 0 0 ## snR81 0 0 DEGS_sig = DEGS[DEGS$FDR &lt; 0.05,] head(DEGS_sig) ## logFC logCPM LR ## snR59 8.918990 10.146912 2142.162 ## snR49 8.541859 9.773155 1652.824 ## snR41 7.757413 11.217747 4287.880 ## YPL198W 7.499306 10.244671 2224.245 ## snR76 7.191421 9.776288 1602.758 ## snR81 7.028955 10.497704 2595.722 ## PValue FDR ## snR59 0 0 ## snR49 0 0 ## snR41 0 0 ## YPL198W 0 0 ## snR76 0 0 ## snR81 0 0 dim(DEGS_sig) ## [1] 2966 5 midx &lt;- match(rownames(DEGS), rownames(diffEx2)) diffEx2 &lt;- diffEx2[midx,] cols &lt;- rep(&quot;black&quot;,nrow(diffEx2)) cols[which(diffEx2&gt;0 )] &lt;- &quot;red&quot; cols[which(diffEx2&lt;0)] &lt;- &quot;blue&quot; # volcano plot plot(DEGS$logFC,-log10(DEGS$PValue),pch=16, col=cols) abline(v=0,lty=3) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
