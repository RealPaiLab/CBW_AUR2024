options(repos = c(CRAN = 'https://cran.r-project.org')); BiocManager::install(ask=FALSE)
options(repos = c(CRAN = 'https://cran.r-project.org'));
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version="devel")
?BiocManager::install
BiocManager::install("netDx",dependencies=TRUE)
BiocManager::install("clusterExperiment")
BiocManager::install("clusterExperiment")
BiocManager::install("clusterExperiment")
citation('Biobase')
1.0394*30150
BiocManager::install("IdeoViz")
sessionInfo()
BiocManager::install("netDx")
BiocManager::install("netDx")
BiocManager::install("netDx",force=TRUE)
require(netDx)
convertToMAE()
?convertToMAE
data(xpr, pheno)
prot <- matrix(rnorm(100*20), ncol=20)
colnames(prot) <- sample(pheno$ID, 20)
rownames(prot) <- sprintf("protein%i",1:100)
myList <- list(rna = xpr, proteomic = prot, pheno = pheno)
MAE <- convertToMAE(myList)
MAE
sessionInfo()
install.packages("bookdown")
setwd("~/Pai_Lab/Grants/2022/CIHR 2022 Fall Project/Preliminary Data/Aim1_IanCheong/")
dat <- read.delim("de_genes.csv")
head(dat)
dat <- read.delim("de_genes.csv",sep=",")
head(dat)
nrow(dat)
hist(dat$p_val,n=100)
sum(dat$p_val_adj<0.05)
sum(dat$p_val<0.05 & dat$avg_log2FC < 0)
sum(dat$p_val_adj<0.05 & dat$avg_log2FC < 0)
library(MASS)
data(crabs)
?crabs
head(crabs)
crabs_meas = crabs[,c("FL","RW","CL","CW","BD")]
c_dist = dist(crabs_meas)
c_hclust = hclust(c_dist)
plot(c_hclust)
c_clusters = cutree(c_hclust,k = 2)
plot(c_hclust)
c_clusters = cutree(c_hclust,k = 2)
pairs(crabs_meas, col = c("orchid","forestgreen")[c_clusters])
pairs(crabs_meas, col = c("orchid","forestgreen")[factor(crabs$sp)])
pairs(crabs_meas, col = c("orchid","forestgreen")[factor(crabs$sex)])
c_pcs = prcomp(crabs_meas)
pairs(c_pcs$x, col = c("orchid","forestgreen")[factor(crabs$sp)])
pairs(c_pcs$x, col = c("orchid","forestgreen")[factor(crabs$sex)])
library(tsne)
c_tsne10 = tsne(crabs_meas,perplexity = 10)
install.packages("tsne")
library(Rtsne)
Rtsne::Rtsne(crabs_meas,perplexity=10)
x <- Rtsne::Rtsne(crabs_meas,perplexity=10)
plot(x)
plot(x[,1],x[,2])
plot(x$x, x$Y)
plot(x$x, x$y)
summary(x)
171/0.5
85000000 / 4
(85 * 1000* 1000) / 4
((85 * 1000* 1000)+1) / 4
((85 * 1000* 1000)+2) / 4
85000001
85000001/4
(85 * 10^6)+1
3600*4
require(plotrix)
plotMissMat <- function(x,xlab="columns",
ylab="rows",border=NA) {
x <- !is.na(x)
class(x) <- "numeric"
color2D.matplot(x,show.values=FALSE,axes=FALSE,
cs1=c(1,0),cs2=c(1,0),cs3=c(1,0),border=border,
cex=0.8,
xlab=xlab,ylab=ylab)
}
require(plotrix)
dat <- matrix(rnorm(100*10,mean=0,sd=1),nrow=100)
colnames(dat) <- c(rep("case",5), rep("control",5))
dim(dat)
plotMissMat(dat) # no missing data
dat2 <- dat;
dat2[sample(1000,10,F)] <- NA
plotMissMat(dat2) # unstructured missing data
dat3 <- dat;
dat3[80:100,6:10] <- NA
plotMissMat(dat3) # structured missing data
library(corrplot)
mouse_cor = cor(mouse_exp)
round(mouse_cor,2)
?corrplot
corrplot(mouse_cor,method = "color")
library(clValid)
data("mouse")
mouse_exp = mouse[,c("M1","M2","M3","NC1","NC2","NC3")]
head(mouse_exp)
plot(density(mouse_exp[,1]))
my_hclust = hclust(my_dist, method = "ward.D2")
my_dist <- dist(mouse_exp)
my_hclust = hclust(my_dist, method = "ward.D2")
plot(my_hclust)
library(bladderbatch)
data(bladderbatch)
data(bladderEset)
data(bladderdata)
bexprs <- exprs(bladderEset)
bpheno <- pData(bladderEset)
d <- dist(t(bexprs))
h <- hclust(d, method="ward.D2")
h3 <- cutree(h, k=3)
clust_colours <- c("red","green","blue")[h3]
?heatmap
?hclust
myhclust <- function(x) {
hclust(x,method="ward.D2")
}
data(mouse)
library(clValid)
data(mouse)
mouse_exp <- mouse[,c(-1,-8)]
mouse_exp <- as.matrix(mouse_exp)
kclust <- kmeans(
mouse_exp,
centers = 3
)
kclust
2:6
seq(1,5,by="2")
?seq
seq(1,5,by=2)
x <- seq(1,2000,by=2)
head(x)
x[,1:10]
x[1:10]
validation_data <- clValid(
mouse_exp,
2:6, # num. clusters to evaluate
clMethods = c("hier","kmeans"), # methods to eval.
validation = "internal"
)
validation_data
summary(validation_data)
validation_data <- clValid(
mouse_exp,
2:6, # num. clusters to evaluate
clMethods = c("hier","kmeans"), # methods to eval.
validation = "internal"
)
d <- dist(t(log(mouse_exp)))
h <- hclust(d,method="ward.D2")
cluster_ids <- cutree(h, k = 2)
clust_colors <- c("dodgerblue","orangered")[cluster_ids]
heatmap(
as.matrix(mouse_exp),
hclustfun = myhclust,
ColSideColors = clust_colors
)
x1 <- read.delim("AUR2024_data/tomerge1.csv",sep=",")
getwd()
setwd("~/software/CBW_AUR2024/book/")
dir()
x1 <- read.delim("AUR2024_data/tomerge1.csv",sep=",")
x1 <- read.delim("AUR2024_data/tomerge1.csv",sep="\t")
head(x1)
x1 <- read.delim("AUR2024_data/tomerge1.csv",sep="\t")
x2 <- read.delim("AUR2024_data/tomerge2.txt",sep=" ")
head(x2)
x2 <- read.delim("AUR2024_data/tomerge2.txt",sep="\t")
head(x2)
head(x2)
head(x1)
x1 <- read.delim("AUR2024_data/tomerge1.csv",sep=",")
head(x1)
head(x2)
x2 <- read.delim("AUR2024_data/tomerge2.txt",sep=" ")
head(x1)
head(x2)
x_merge <- merge(x1, x2, by.x = "Sample_ID", by.y = "sampleID")
head(x_merge)
?merge
x_merge <- merge(x=x1, y=x2, by.x = "Sample_ID", by.y = "sampleID")
head(x_merge)
colnames(x_merge)[1] <- "WhateverIwanttoCallIt"
head(x_merge)
x_merge <- x_merge[!duplicated(x_merge),]
x_merge$Biomarker_value[c(2,4)] <- NA
x_merge
tmp <- na.omit(x_merge)
head(tmp)
idx <- which(tmp$Biomarker_value > 70)
idx
tmp <- tmp[-idx,]
print(nrow(tmp))
print("about to delete high biomarker values")
print(nrow(tmp))
print("after deleting high biomarker values")
print(nrow(tmp))
write.table(tmp,file="my_cleaned_data.txt",sep="\t",col=T,row=F)
dat <- read.delim(
"AUR2024_data/titanic.csv",
sep="," # indicate the column separator
)
head(dat)
write.table(my_new_table, file="myoutputfile.txt",sep="\t", col=TRUE)
write.table(x_merge, file="myoutputfile.txt",sep="\t", col=TRUE)
dat <- read.delim(
"AUR2024_data/titanic.csv",
sep="," # indicate the column separator
)
table(dat$Survived)
table(dat$Survived,useNA="always")
tmp <- dat
head(tmp)
tmp$Survived[1] <- NA
table(tmp$Survived)
head(tmp)
table(tmp$Survived, useNA="always")
nrow(dat)
table(dat$Pclass)
summary(dat$Age)
summary(dat[,"Age"])
colnames(dat)
summary(dat[,6])
if (!requireNamespace("plotrix", quietly = TRUE)) install.packages("plotrix")
suppressMessages(library(plotrix))
#' show data missingness as a chequered matrix
#'
#' @param x (matrix) data matrix.
#' @param outFile (char) path to file for printing graph
#' @param wd (numeric) width in inches
#' @param ht (numeric) height in inches
#' @return plots missingness matrix to file
#' @import plotrix
#' @export
plotMissMat <- function(x,xlab="columns",
ylab="rows",border=NA) {
x <- !is.na(x)
class(x) <- "numeric"
color2D.matplot(x,show.values=FALSE,axes=FALSE,
cs1=c(1,0),cs2=c(1,0),cs3=c(1,0),border=border,
cex=0.8,
xlab=xlab,ylab=ylab)
}
plotMissMat(dat)
head(dat)
dat_missing <- is.na(dat)
head(dat_missing)
sum(dat_missing[,1])
sum(dat_missing[,6])
colSums(dat_missing)
x <- " "; y <- ""
class(x)
class(y)
x <- as.numeric(x)
x
as.numeric(y)
class(dat$Age)
sapply(dat, class)
colSums(is.na(dat))
head(state.x77)
iris
head(iris)
head(crabs)
head(crab)
head(diamonds)
head(diamond)
mpg
state.x77
class(state.x77)
state.x77 <- as.data.frame(state.x77)
head(state.x77)
summary(state.x77$Population)
?state.x77
library(ggplot2)
p <- ggplot(state.x77,
aes(x = Illiteracy,y = Income)
)
p
p <- p + geom_point() # scatter plot
p
p + geom_smooth()
x <- state.x77$Illiteracy
y <- state.x77$Income
cor.test(x,y)
out <- cor.test(x,y)
out
summary(out)
out$p.value
p <- ggplot(dat)
p + geom_boxplot(
aes(x = factor(Pclass), # "factor()" makes a data column a categorical variable
y = Fare))
class(dat$Pclass)
p + geom_boxplot(
aes(x = Pclass, # "factor()" makes a data column a categorical variable
y = Fare))
p + geom_boxplot(
aes(x = factor(Pclass), # "factor()" makes a data column a categorical variable
y = Fare))
p + geom_bar aes(fill=factor(Survived),
p + geom_bar(aes(fill=factor(Survived),
x = Pclass)
)
p + geom_bar(
aes(fill=factor(Survived), x = Pclass),
position = "fill"
)
p + geom_bar(
aes(fill=factor(Survived), x = Pclass),
position = "fill"
) + theme(axis.text=element_text(size=20))
p_final  <- p + geom_bar(
aes(fill=factor(Survived), x = Pclass),
position = "fill"
)
p_final_v2 <- p_final + ggtitle("Survival data")
p_final_v2
ggsave(p_final_v2, file="myGraph.pdf")
p1 <- p + geom_boxplot(
+     aes(x = factor(Pclass), # "factor()" makes a data column a categorical variable
+         y = Fare))
p1 <- p + geom_boxplot(aes(x = factor(Pclass), y = Fare))
p1
p2 <- p_final_v2
p2
library(mlbench)
data(PimaIndiansDiabetes2)
head(PimaIndiansDiabetes2)
dat <- PimaIndiansDiabetes2
head(dat)
?PimaIndiansDiabetes
dim(dat)
colSums(is.na(dat))
plotMissMat(dadt)
plotMissMat(dat)
p_final_v2
library(mlbench)
data(PimaIndiansDiabetes2)
dat <- PimaIndiansDiabetes2
head(dat)
colnames(dat)
tmp <- is.na(dat)
head(tmp)
colSums(tmp)
table(dat$diabetes)
table(dat$diabetes,useNA="always")
p <- ggplot(dat, aes(x=glucose,y=diabetes))
p
p + geom_point()
p <- ggplot(dat, aes(x = glucose, y = factor(diabetes)))
p + geom_point() + geom_smooth()
?glm
?glm
mod <- glm(factor(diabetes)~glucose, data=dat, family="binomial" )
mod
class(mod)
summary(mod)
head(dat)
mod <- glm(factor(diabetes)~ glucose + pregnant + age + pressure + triceps,
dat,
family = "binomial")
summary(mod)
xpr
head(dat)
